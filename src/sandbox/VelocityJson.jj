/**
 * Author:
 * 	Pierre Lindenbaum PhD
 * Date:
 * 	March-2011
 * Contact:
 * 	plindenbaum@yahoo.fr
 * Reference:
 *   
 * WWW:
 * 	http://plindenbaum.blogspot.com
 * Wiki
 *  
 * Motivation:
 * 	process JSON structure with apache velocity
 */
options {
STATIC=false;
}


PARSER_BEGIN(VelocityJson)

package sandbox;
import java.util.*;
import java.io.*;
import java.math.*;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;

@SuppressWarnings("unchecked")
public class VelocityJson
{

private String unescape(String s) throws ParseException
	{
	 StringBuilder b=new StringBuilder(s.length());
        int i=0;
        while(i<s.length())
        	{
        	if(s.charAt(i)=='\\')
        		{
        		if( i+1== s.length())  throw new ParseException("Badly escaped string "+s);
        		++i;
        		switch(s.charAt(i))
        			{
        			case 'n': b.append("\n");break;
        			case 'r': b.append("\r");break;
        			case 't': b.append("\t");break;
        			case '\\': b.append("\\");break;
        			case '\'': b.append("\'");break;
        			case '\"': b.append("\"");break;
        			default: throw new ParseException("Badly escaped string "+s);
        			}
        		}
        	else
        		{
        		b.append(s.charAt(i));
        		}
        	++i;
        	}
        return b.toString();
	}

private static class Main
	{
	VelocityContext context=null;
	Main()
		{
		context = new VelocityContext();
		}
	private void put(String key,Object o)
		{
		if(context.containsKey(key))
			{
			System.err.println("Warning: Key="+key+" defined twice");
			}
		context.put(key,o);
		}
	public void main(String args[]) throws Exception
		{
		String readstdin=null;
		int optind=0;
		while(optind< args.length)
			{
			if(args[optind].equals("-h") ||
			   args[optind].equals("-help") ||
			   args[optind].equals("--help"))
				{
				System.err.println("Pierre Lindenbaum PhD 2011");
				System.err.println("Options:");
				System.err.println(" -h help; This screen.");
				System.err.println(" -s (key) (string) add this string to the context.");
				System.err.println(" -e (key) (json-expr) add this json to the context.");
				System.err.println(" -f (key) (json-file) add this json to the context.");
				System.err.println(" -i (key) and read stdin-json to the context.");
				return;
				}
			else if(args[optind].equals("-i"))
				{
				readstdin=args[++optind];
				}
			else if(args[optind].equals("-s"))
				{
				String key=args[++optind];
				Object value=args[++optind];
				put(key,value);
				}
			else if(args[optind].equals("-e"))
				{
				String key=args[++optind];
				Object value=new VelocityJson(new StringReader(args[++optind])).parse();
				put(key,value);
				}
			else if(args[optind].equals("-f"))
				{
				String key=args[++optind];
				FileReader r=new FileReader(args[++optind]);
				Object value=new VelocityJson(r).parse();
				put(key,value);
				r.close();
				}
			else if(args[optind].equals("--"))
				{
				optind++;
				break;
				}
			else if(args[optind].startsWith("-"))
				{
				System.err.println("Unknown option "+args[optind]);
				return;
				}
			else 
				{
				break;
				}
			++optind;
			}
		
		if(readstdin!=null)
			{
			Object o=new VelocityJson(System.in).parse();
			put(readstdin,o);
			}
		if(optind+1!=args.length)
			{
			System.err.println("Illegal number of arguments. Expected one Velocity Template.\n");
			return;
			}
		File file=new File(args[optind]);
		VelocityEngine ve = new VelocityEngine();
		ve.setProperty("resource.loader", "file");
		ve.setProperty("file.resource.loader.class","org.apache.velocity.runtime.resource.loader.FileResourceLoader");
		ve.setProperty("file.resource.loader.path",file.getParent());
        	ve.init();
		Template template = ve.getTemplate(file.getName());
		PrintWriter w=new PrintWriter( System.out);
		template.merge( this.context, w);
		w.flush();
		}
	}


public static void main(String args[])  throws Exception
	{
	new Main().main(args);
	}
}


PARSER_END(VelocityJson)

SKIP :
{
" "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n"])* "\n">
| <"/*">: INSIDE_COMMENT
}

<INSIDE_COMMENT>
SKIP:
{
        <"*/">: DEFAULT
|       <~[]>
}



TOKEN : /* LITERALS */
{
  <TRUE: "true">
| <FALSE: "false">
| <NULL: "null">
| <#LETTER: ["_","a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"] >
| <#SIGN: ["-","+"]>
| <#EXPONENT: ("E"|"e") (<SIGN>)? (<DIGIT>)+ >
| <FLOATING_NUMBER: (<DIGIT>)* "." (<DIGIT>)* (<EXPONENT>)?
| (<DIGIT>)+ (<EXPONENT>) >
| <INT_NUMBER: (<DIGIT>)+ >
| <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"-")* >
| <#ESCAPE_CHAR: "\\" ["n","t","b","r","f","\\","'","\""] >
| <SIMPLE_QUOTE_LITERAL:
"\'"
( (~["\'","\\","\n","\r"])
| <ESCAPE_CHAR>
)*
"\'"
>
|
<DOUBLE_QUOTE_LITERAL:
"\""
( (~["\"","\\","\n","\r"])
| <ESCAPE_CHAR>
)*
"\""
>
| <ARRAY_OPEN: "[">
| <ARRAY_CLOSE: "]">
| <COMMA: ",">
| <OBJECT_OPEN: "{">
| <OBJECT_CLOSE: "}">
| <PAR_OPEN: "(">
| <PAR_CLOSE: ")">
| <COLON: ":">
}

private Object parse():{Object o;}
	{
	o=any() eof()
		{
		return o;
		}
	}

private Object any():
	{Object o;}
	{
	(
	o= complexNode()
	| o= terminalNode()
	)
	{return o;}
	}

public Object complexNode():
	{Object o;}
	{
	(
	o= objectNode()
	| o= arrayNode()
	)
	{return o;}
	}

public Object terminalNode():
	{
	Object n;
	}
	{
	(
	  n=decimalNode() { return n;}
	| n=intNode() { return n;}
	| n=boolNode() { return n;}
	| n=nilNode() { return n;}
	| n=stringNode() { return n;}
	)
	}

public Object nilNode():{}
	{
	<NULL> { return null; }
	}

public Boolean boolNode():{}
	{
	(
	  <TRUE>  { return Boolean.TRUE; }
	| <FALSE> { return Boolean.FALSE;}
	)
	}

public BigInteger intNode():{	Token t;}
	{
	t=<INT_NUMBER> { return new BigInteger(t.image); }
	}

public BigDecimal decimalNode():{	Token t;}
	{
	t=<FLOATING_NUMBER> { return new BigDecimal(t.image); }
	}

public String stringNode():{	String s;}
	{
	s=characters() { return s; }
	}


private String characters():
	{
	Token t;
	}
	{
	(
	t=<SIMPLE_QUOTE_LITERAL>
		{
		return  unescape(t.image.substring(1,t.image.length()-1));
		}
	| t=<DOUBLE_QUOTE_LITERAL>
		{
		return unescape(t.image.substring(1,t.image.length()-1));
		}
	| t=<IDENTIFIER>
	     {
	     return t.image;
	     }
	)
	}

public List<Object> arrayNode():
	{ List<Object> vector= new ArrayList<Object>(); Object o;}
	{
	openArray() ( o=any() {vector.add(o);} (comma() o=any() {vector.add(o);} ) * )? closeArray()
		{
		return vector;
		}
	}

public Map<String,Object> objectNode():
	{Map<String,Object> map= new HashMap<String,Object>(); }
	{
	openObject() ( keyValue(map) (comma() keyValue(map))*)? closeObject()
		{
		return map;
		}
	}

public void colon():
   {
   }
   {
   <COLON>
   }

private void keyValue( Map<String,Object> map):
	{String k; Object v;}
	{
	(k=characters() colon() v=any())
		{
		if(map.containsKey(k)) throw new ParseException(k+" defined twice in object");
		map.put(k,v);
		}
	}
	
/** function for streaming big object/array */
public void openObject():{}
	{
	<OBJECT_OPEN>
	}

/** function for streaming big object/array */
public void closeObject():{}
	{
	<OBJECT_CLOSE>
	}

/** function for streaming big object/array */
public void openArray():{}
	{
	<ARRAY_OPEN>
	}

/** function for streaming big object/array */
public void closeArray():{}
	{
	<ARRAY_CLOSE>
	}

/** function for streaming big object/array */
public void comma():{}
	{
	<COMMA>
	}

/** function for streaming big object/array */
public char commaOrCloseArray():{char c;}
	{
	( comma() {c=',';} | closeArray() { c=']';})
		{
		return c;
		}
	}

/** function for streaming big object/array */
public char commaOrCloseObject():{char c;}
	{
	( comma() {c=',';} | closeObject() { c='}';})
		{
		return c;
		}
	}
/** function for streaming big object/array */
public char openClomplex():{char c;}
	{
	( openArray() {c='[';} | openObject() { c='{';})
		{
		return c;
		}
	}

/** go to EOF, check that there are only some blanks chars */
public void eof():{}
	{
	<EOF>
	}	
	
