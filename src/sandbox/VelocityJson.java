/* Generated By:JavaCC: Do not edit this line. VelocityJson.java */
import java.util.*;
import java.math.*;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;

@SuppressWarnings("unchecked")
public class VelocityJson implements VelocityJsonConstants {

private String unescape(String s) throws ParseException
        {
         StringBuilder b=new StringBuilder(s.length());
        int i=0;
        while(i<s.length())
                {
                if(s.charAt(i)=='\u005c\u005c')
                        {
                        if( i+1== s.length())  throw new ParseException("Badly escaped string "+s);
                        ++i;
                        switch(s.charAt(i))
                                {
                                case 'n': b.append("\u005cn");break;
                                case 'r': b.append("\u005cr");break;
                                case 't': b.append("\u005ct");break;
                                case '\u005c\u005c': b.append("\u005c\u005c");break;
                                case '\u005c'': b.append("\u005c'");break;
                                case '\u005c"': b.append("\u005c"");break;
                                default: throw new ParseException("Badly escaped string "+s);
                                }
                        }
                else
                        {
                        b.append(s.charAt(i));
                        }
                ++i;
                }
        return b.toString();
        }

private static class Main
        {
        VelocityContext context=null;
        Main()
                {
                context = new VelocityContext();
                }
        public void put(String key,Object o)
                {
                context.put(key,o);
                }
        public void main(String args[]) throws Exception
                {
                int optind=0;
                while(optind< args.length)
                        {
                        if(args[optind].equals("-h") ||
                           args[optind].equals("-help") ||
                           args[optind].equals("--help"))
                                {
                                System.err.println("Pierre Lindenbaum PhD 2011");
                                System.err.println("Options:");
                                System.err.println(" -h help; This screen.");
                                System.err.println(" -q <query> default is:"+app.query);
                                return;
                                }
                        else if(args[optind].equals("-s"))
                                {
                                String key=args[++optind];
                                Object value=args[++optind];
                                put(key,value);
                                }
                        else if(args[optind].equals("-e"))
                                {
                                String key=args[++optind];
                                Object value=new VelocityJson(new StringReader(args[++optind])).any();
                                put(key,value);
                                }
                        else if(args[optind].equals("-f"))
                                {
                                String key=args[++optind];
                                FileReader r=new FileReader(args[++optind]);
                                Object value=new VelocityJson(r).any();
                                put(key,value);
                                }
                        else if(args[optind].equals("-L"))
                                {
                                app.limit=Integer.parseInt(args[++optind]);
                                }
                        else if(args[optind].equals("--"))
                                {
                                optind++;
                                break;
                                }
                        else if(args[optind].startsWith("-"))
                                {
                                System.err.println("Unknown option "+args[optind]);
                                return;
                                }
                        else
                                {
                                break;
                                }
                        ++optind;
                        }
                }
        }


public static void main(String args[])
        {
        new Main().main(args);
        }

  final private Object any() throws ParseException {
         Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY_OPEN:
    case OBJECT_OPEN:
      o = complexNode();
      break;
    case TRUE:
    case FALSE:
    case NULL:
    case FLOATING_NUMBER:
    case INT_NUMBER:
    case IDENTIFIER:
    case SIMPLE_QUOTE_LITERAL:
    case DOUBLE_QUOTE_LITERAL:
      o = terminalNode();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object complexNode() throws ParseException {
         Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBJECT_OPEN:
      o = objectNode();
      break;
    case ARRAY_OPEN:
      o = arrayNode();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return o;}
    throw new Error("Missing return statement in function");
  }

  final public Object terminalNode() throws ParseException {
        Object n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATING_NUMBER:
      n = decimalNode();
                            {if (true) return n;}
      break;
    case INT_NUMBER:
      n = intNode();
                        {if (true) return n;}
      break;
    case TRUE:
    case FALSE:
      n = boolNode();
                         {if (true) return n;}
      break;
    case NULL:
      n = nilNode();
                        {if (true) return n;}
      break;
    case IDENTIFIER:
    case SIMPLE_QUOTE_LITERAL:
    case DOUBLE_QUOTE_LITERAL:
      n = stringNode();
                           {if (true) return n;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object nilNode() throws ParseException {
    jj_consume_token(NULL);
                 {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean boolNode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                    {if (true) return Boolean.TRUE;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                    {if (true) return Boolean.FALSE;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public BigInteger intNode() throws ParseException {
                                Token t;
    t = jj_consume_token(INT_NUMBER);
                         {if (true) return new BigInteger(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public BigDecimal decimalNode() throws ParseException {
                                        Token t;
    t = jj_consume_token(FLOATING_NUMBER);
                              {if (true) return new BigDecimal(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public String stringNode() throws ParseException {
                                String s;
    s = characters();
                         {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final private String characters() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIMPLE_QUOTE_LITERAL:
      t = jj_consume_token(SIMPLE_QUOTE_LITERAL);
                {if (true) return  unescape(t.image.substring(1,t.image.length()-1));}
      break;
    case DOUBLE_QUOTE_LITERAL:
      t = jj_consume_token(DOUBLE_QUOTE_LITERAL);
                {if (true) return unescape(t.image.substring(1,t.image.length()-1));}
      break;
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
             {if (true) return t.image;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Object> arrayNode() throws ParseException {
          List<Object> vector= new ArrayList<Object>(); Object o;
    openArray();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case FLOATING_NUMBER:
    case INT_NUMBER:
    case IDENTIFIER:
    case SIMPLE_QUOTE_LITERAL:
    case DOUBLE_QUOTE_LITERAL:
    case ARRAY_OPEN:
    case OBJECT_OPEN:
      o = any();
                               vector.add(o);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
        comma();
        o = any();
                                                                 vector.add(o);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    closeArray();
                {if (true) return vector;}
    throw new Error("Missing return statement in function");
  }

  final public Map<String,Object> objectNode() throws ParseException {
         Map<String,Object> map= new HashMap<String,Object>();
    openObject();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case SIMPLE_QUOTE_LITERAL:
    case DOUBLE_QUOTE_LITERAL:
      keyValue(map);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        comma();
        keyValue(map);
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    closeObject();
                {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public void colon() throws ParseException {
    jj_consume_token(COLON);
  }

  final private void keyValue(Map<String,Object> map) throws ParseException {
         String k; Object v;
    k = characters();
    colon();
    v = any();
                if(map.containsKey(k)) {if (true) throw new ParseException(k+" defined twice in object");}
                map.put(k,v);
  }

  final public void openObject() throws ParseException {
    jj_consume_token(OBJECT_OPEN);
  }

  final public void closeObject() throws ParseException {
    jj_consume_token(OBJECT_CLOSE);
  }

  final public void openArray() throws ParseException {
    jj_consume_token(ARRAY_OPEN);
  }

  final public void closeArray() throws ParseException {
    jj_consume_token(ARRAY_CLOSE);
  }

  final public void comma() throws ParseException {
    jj_consume_token(COMMA);
  }

  final public char commaOrCloseArray() throws ParseException {
                                 char c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      comma();
                   c=',';
      break;
    case ARRAY_CLOSE:
      closeArray();
                                            c=']';
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public char commaOrCloseObject() throws ParseException {
                                  char c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      comma();
                   c=',';
      break;
    case OBJECT_CLOSE:
      closeObject();
                                             c='}';
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public char openClomplex() throws ParseException {
                            char c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY_OPEN:
      openArray();
                       c='[';
      break;
    case OBJECT_OPEN:
      openObject();
                                                c='{';
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public void eof() throws ParseException {
    jj_consume_token(0);
  }

  /** Generated Token Manager. */
  public VelocityJsonTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2770e00,0x2400000,0x370e00,0x600,0x340000,0x1000000,0x2770e00,0x1000000,0x340000,0x1800000,0x5000000,0x2400000,};
   }

  /** Constructor with InputStream. */
  public VelocityJson(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VelocityJson(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VelocityJsonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public VelocityJson(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VelocityJsonTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public VelocityJson(VelocityJsonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(VelocityJsonTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
